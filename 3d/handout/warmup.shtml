<!--#set var="title" value="Project 0: Warmup" -->
<!--#set var="tab" value="Assignments" -->
<!--#set var="basedir" value=".." -->
<!--#include virtual="../stdhead.shtml" -->
<header>
  <h1>Project 0: Warmup</h1>
</header>


<section>
  <h2>Introduction</h2>

  <p>Welcome to cs195u! This assignment introduces first-person movement in a 3D world, and serves as a warm-up to working with the support code. It also introduces texture-loading in OpenGL.</p>

  <p>You will want to reuse much of the code from this assignment in the next assignment, Minecraft, so don't be sloppy! Assignments in cs195u get progressively more complex, and each assignment builds upon previous assignments. This means that you should design your code carefully, even for small-scale assignments like Warmup. Your code should be modular so that you can easily reuse parts of your code in future assignments, and should adhere to a consistent style so that you and anyone else can easily read the code.</p>

  <p>A demo is available by running <code>cs195u_demo warmup</code></p>
</section>


<section>
  <h2>Support Files</h2>

  <section>
    <h3>Getting Started</h3>

    <p>The support files for this assignment are located at <code>/course/cs195u/asgn/warmup</code>. To obtain the support files, simply copy this folder into your own <code>~/course/cs195u</code> directory.</p>

    <p>We recommend using the <a href="http://qt.nokia.com/products/developer-tools/">Qt Creator IDE</a> for this course. It has excellent refactoring, code completion, and debugging capabilities in addition to a built-in UI designer should you need to develop a level editor. Run the qtcreator command and open warmup.pro to load the project. Files ending in pro are text files containing the project configuration (a list of sources, compiler flags, and platform-specific build commands). There are several things that make using Qt Creator especially easy:
    </p>

    <ul>
      <li>Ctrl+R: Build and run your project (standard out appears in the Application Output pane)</li>
      <li>Ctrl+K: Quickly open any file in the project by name (in addition to any class or function)</li>
      <li>Ctrl+Click: Jump to the definition of any symbol (variable, function, macro, etc.)</li>
      <li>F4: Switch between <code>*.h</code> and <code>*.cpp</code> files with the same name</li>
    </ul>
  </section>

  <section>
    <h3>Code</h3>

    <p>A major part of game engine development is being able to design large and complex software systems. For this reason, the support code for cs195u is minimal. You will need to implement the majority of each project from scratch, so make sure to allocate time for design.</p>

    <p>That being said, we realize you have limited time and want you to focus on what's interesting, so we have provided a few support files to get your started:</p>

    <dl>
      <dt><code>view.{h,cpp}</code></dt>
      <dd>
        Defines a <code>View</code> widget extending <a href="http://doc.qt.nokia.com/latest/qglwidget.html"><code>QGLWidget</code></a>.
        This is a starting point for your game engine; it sets up a full screen window with mouse capture and a variable-update game loop.
        Every update of the game loop calls <code>tick()</code> to handle game updates and triggers <code>paintGL()</code> to redraw the view.
        You will want to fill in these methods when implementing Warmup.
      </dd>
      <dt><code>mainwindow.{h,cpp,ui}</code></dt>
      <dd>
        Initializes a main window containing a View widget.
        You should not need to modify these files.
      </dd>
      <dt><code>vector.h</code></dt>
      <dd>
        Contains definitions for <code>Vector2</code>, <code>Vector3</code>, and <code>Vector4</code>.
        These are floating-point vector classes with overloaded arithmetic operators and other helpful methods such as <code>randomDirection()</code>.
        Make sure to look through what's provided here before starting on the assignment.
      </dd>
      <dt><code>main.cpp</code></dt>
      <dd>
        Starts the program.
      </dd>
    </dl>

    <p>
      <em>Note: when you create new folders, you may want to add them to <code>INCLUDEPATH</code> and <code>DEPENDPATH</code> in <code>warmup.pro</code> so you can <code>#include</code> files inside them directly.</em>
    </p>
  </section>
  <section>
    <h3>Resources</h3>
    <p>In addition to the support code, we may also provide resources such as textures and models. In this assignment, the only resource we provide is a grass texture entitled <code>grass.png</code> (from <a href="http://opengameart.org/content/grass-001">opengameart.org</a>).</p>
  </section>
</section>


<section>
  <h2>Requirements</h2>

  <section>
    <h3>Overview</h3>

    <p>Assignments in cs195u have weekly checkpoints. Each checkpoint consists of a list of requirements that must be fulfilled. Make sure to implement all of the listed requirements for each checkpoint to receive credit.</p>

    <p>There is also an implicit requirement that applies to every checkpoint: well-designed and readable code. If you hand in hacky code (i.e. inconsistent, poorly organized, uncommented), you will not receive credit.</p>
  </section>
  <section id="week1">
    <h3>Warmup</h3>

    <p>Warmup is a one-week assignment, so there is only one checkpoint. The requirements for this checkpoint are:</p>

    <ul>
      <li>Keyboard-controlled <a href="http://en.wikipedia.org/wiki/Strafing_(gaming)">strafing</a>-style movement</li>
      <li>Left and right keys strafe left and right, respectively (See the first lecture for details)</li>
      <li>First-person camera that follows mouse movement</li>
      <li>Horizontal mouse movement adjusts <a href="http://en.wikipedia.org/wiki/Yaw_(rotation)">yaw</a>, vertical movement adjusts <a href="http://en.wikipedia.org/wiki/Yaw_(rotation)">pitch</a></li>
      <li>Pitch must be locked between (-PI/2, PI/2)</li>
      <li>Must be able to jump off the ground with a keyboard or mouse button</li>
      <li>Must not be able to jump in mid-air</li>
      <li>Must act under downwards gravity</li>
      <li>Planar geometry with grass texture (i.e. a grass-textured floor)</li>
    </ul>
  </section>
</section>


<section>
  <h2>Advice</h2>

  <p>You may want to store the camera's yaw and pitch instead of a look vector. In particular this avoids the singularity when looking straight up or straight down, where it is impossible to determine the orientation since the look vector is parallel to the up vector.</p>

  <p>Don't do everything in <code>view.cpp</code>! Your code for this assignment will serve as a base for your Minecraft engine.</p>
</section>


<section>
  <h2>Handing In</h2>

  <p>To hand in the assignment, run <code>cs195u_handin warmup</code> in the directory containing <code>warmup.pro</code>. You will receive a confirmation email if the hand-in is successful.</p>

  <p>As always, if you have any questions about any of the above, come to hours or email the TAs at <a href="mailto:cs195utas@cs.brown.edu">cs195utas@cs.brown.edu</a>.</p>
</section>
<!--#include virtual="../stdfoot.shtml" -->
